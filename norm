#! /usr/bin/env python3

import sys, os
import unicodedata
import re
from optparse import OptionParser

def get_confirmation():

	print("Proceed with the operation? [y/n] ", end='')
	ret = input()
	if ret != 'y':
		raise Exception('Did not read "y". Skipping the file.')

def check_file_existence(file):

	if not os.path.exists(file):
		raise Exception('File "' + file + '" does not exist.')

def get_opt_record(opts, opt):
	for rec in opts:
		if opt in rec:
			return rec
	return None

def parse_argv():

	p = OptionParser(usage = "%prog [OPTION] FILE1 [FILE2 ...]")
	p.add_option("-d", action="count", dest="diacritics", default=0,
				 help="disable diacritics removal")
	p.add_option("-u", action="count", dest="uppercase", default=0,
				 help="disable uppercase to lowercase transformation")
	p.add_option("-s", action="count", dest="stripping", default=0,
				 help="disable stripping of leading/trailling whitespace"
				 + " and removal of redundant whitespace occurences")
	p.add_option("-w", action="count", dest="whitespace", default=0,
				 help="disable substitution of whitespace for dots")
	p.add_option("-r", "--recursive", action="count", dest="recursive", default=0,
				 help="enable recursive directory processing")
	p.add_option("-f", "--force", action="count", dest="force", default=0,
				 help="force non-interactive mode")

	opts, args = p.parse_args()
	if opts.diacritics and opts.uppercase and opts.stripping and opts.whitespace:
		raise Exception("All functionality got turned off by the options.")

	return opts, args

def refine_file_name(path, opts):

	check_file_existence(path)
	# remove trailing slash if present
	path = os.path.normpath(path)
	name = orig_name = os.path.basename(path)
	dir_path = os.path.dirname(path)

	if opts.diacritics == 0:
		name = ''.join(c for c in unicodedata.normalize('NFD', name)
					   if unicodedata.category(c) != 'Mn')
	if opts.uppercase == 0:
		name = name.lower()
	if opts.stripping == 0:
		name = name.strip()
		name = re.sub('\s+', ' ', name)
	if opts.whitespace == 0:
		name = re.sub('\s', '.', name)

	new_path = os.path.join(dir_path, name)
	if name == orig_name:
		raise Exception('"' + path + '": Nothing to refine. Skipping the file.')
	elif os.path.exists(new_path):
		raise Exception('Destination file name "' + new_path +
						'" already exists. Skipping the file.')
	else:
		print('"', path, '" ::: "', new_path, '". ', sep='', end='', flush=True)
	if not opts.force:
		get_confirmation()
	print('Done.', file=sys.stderr, flush=True)
	os.rename(path, new_path)
	return new_path

def main():

	try:
		opts, args = parse_argv()
	except Exception as msg:
			print(msg, file=sys.stderr)
			return 2

	ret = 0
	files = []
	open_dirs = []
	rel_path = "."
	for name in args:
		if os.path.isdir(name):
			open_dirs.append(name)
		else:
			files.append(name)

	while True:
		# refine all non-directory names
		while files:
			try:
				path = files.pop(0)
				refine_file_name(path, opts)
			except Exception as msg:
				print(msg, file=sys.stderr, flush=True)
				ret = 3

		# refine all directory names
		for idx, dir in enumerate(open_dirs):
			try:
				open_dirs[idx] = refine_file_name(dir, opts)
			except Exception as msg:
				print(msg, file=sys.stderr, flush=True)
				ret = 3

		if opts.recursive and open_dirs:
				dir_path = open_dirs.pop(0)
				for name in sorted(os.listdir(dir_path)):
					path = os.path.join(dir_path, name)
					if os.path.isdir(path):
						open_dirs.append(path)
					else:
						files.append(path)
		else:
			break

	return ret

ret = main()
sys.exit(ret)
