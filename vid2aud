#! /usr/bin/env python3

import sys, os
import re
import subprocess
import readline
from optparse import OptionParser

def check_file_validity(file):
	# if file is not of regular type
	if not os.path.isfile(file):
		if os.path.exists(file):
			raise Exception('"' + file + '" is not regular file.')
		else:
			raise Exception('File "' + file + '" does not exist.')

def get_rl_input(prompt, prefill):
   readline.set_startup_hook(lambda: readline.insert_text(prefill))
   try:
      return input(prompt)
   finally:
      readline.set_startup_hook()

def get_metadata(name):

	name = name.strip()
	name = re.sub('\s+|\.|:', ' ', name)
	ret = get_rl_input('Enter metadata in the format "artist:title": ', name)
	if ':' not in ret:
		raise Exception('No ":" symbol found.')
	artist, title = ret.split(':')
	return artist, title

def parse_argv():

	p = OptionParser(usage = "%prog [OPTION] FILE1 [FILE2 ...]")
	p.add_option("-f", "--format", action="store", dest="format",
				 metavar="FORMAT", default='mp3',
				 help="Select output format (mp3 / ogg), default is mp3.")
	p.add_option("-n", "--no-metadata",
				 action="count", dest="no_metadata", default=0,
				 help="Avoid metadata query.")

	opts, args = p.parse_args()

	if not args:
		raise Exception("Missing a FILE argument.")

	allowed_codecs = { 'mp3': 'libmp3lame', 'ogg': 'libvorbis' }
	codec = allowed_codecs.get(opts.format)
	if not codec:
		raise Exception("Unrecognized output format \'" + opts.format + "\'.")

	return opts, args, codec
	

def main():

	try:
		opts, files, codec = parse_argv()

		ret = 0
		for file in files:
			check_file_validity(file)
			dirname = os.path.dirname(file)
			basename = os.path.basename(file)
	
			ret = basename.rfind('.')
			ext_size = len(basename) - ret
			if ret > 0 and ext_size <= 5:
				# remove extension
				dest_name = os.path.splitext(basename)[0]
			if opts.no_metadata == 1:
				artist, title = "", ""
			else:
				artist, title = get_metadata(dest_name)
			ls = ['ffmpeg',
				  '-loglevel', 'error',
				  '-i', file,
				  '-acodec', codec,
				  '-vn',
				  '-metadata', 'artist=' + artist,
				  '-metadata', 'title=' + title,
				  os.path.join(dirname, dest_name) + '.' + opts.format ]
			subprocess.call(ls)
	except Exception as msg:
		print(msg, file=sys.stderr, flush=True)
		ret = 1

	return ret

ret = main()
sys.exit(ret)
